{"ast":null,"code":"import axios from 'axios';\nvar request = axios.create({\n  baseURL: 'http://chimke.cn:8088',\n  timeout: 20000\n}); // 添加请求拦截器\n\nrequest.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  // config.headers.token = `${token}`\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n}); // 添加响应拦截器\n\nrequest.interceptors.response.use(function (response) {\n  // 对响应数据做点什么\n  var res = response.data;\n\n  if (res.code === 401) {// 未登录\n  } else if (res.code === 200) {\n    return res;\n  } else {\n    return Promise.reject(res);\n  }\n}, function (error) {\n  // 对响应错误做点什么\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"sources":["D:/卓志/web/study/jm-next-h5/utils/http.js"],"names":["axios","request","create","baseURL","timeout","interceptors","use","config","error","Promise","reject","response","res","data","code"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAE,uBADgB;AAEzBC,EAAAA,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAIA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CAAiC,UAAUC,MAAV,EAAkB;AAC/C;AACG;AACA,SAAOA,MAAP;AACF,CAJL,EAIO,UAAUC,KAAV,EAAiB;AAChB;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACN,CAPD,E,CASA;;AACAP,OAAO,CAACI,YAAR,CAAqBM,QAArB,CAA8BL,GAA9B,CAAkC,UAAUK,QAAV,EAAoB;AAClD;AACA,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAArB;;AACA,MAAID,GAAG,CAACE,IAAJ,KAAa,GAAjB,EAAsB,CAAE;AAEvB,GAFD,MAEO,IAAIF,GAAG,CAACE,IAAJ,KAAa,GAAjB,EAAsB;AACzB,WAAOF,GAAP;AACH,GAFM,MAEA;AACH,WAAOH,OAAO,CAACC,MAAR,CAAeE,GAAf,CAAP;AACH;AACJ,CAVD,EAUG,UAAUJ,KAAV,EAAiB;AACjB;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACF,CAbD;AAeA,eAAeP,OAAf","sourcesContent":["import axios from 'axios'\r\n\r\nconst request = axios.create({\r\n    baseURL: 'http://chimke.cn:8088',\r\n    timeout: 20000\r\n})\r\n// 添加请求拦截器\r\nrequest.interceptors.request.use(function (config) {\r\n    // 在发送请求之前做些什么\r\n       // config.headers.token = `${token}`\r\n       return config;\r\n    }, function (error) {\r\n        // 对请求错误做些什么\r\n       return Promise.reject(error)\r\n})\r\n\r\n// 添加响应拦截器\r\nrequest.interceptors.response.use(function (response) {\r\n    // 对响应数据做点什么\r\n    const res = response.data\r\n    if (res.code === 401) { // 未登录\r\n\r\n    } else if (res.code === 200) {\r\n        return res\r\n    } else {\r\n        return Promise.reject(res)\r\n    }\r\n}, function (error) {\r\n   // 对响应错误做点什么\r\n   return Promise.reject(error);\r\n})\r\n\r\nexport default request"]},"metadata":{},"sourceType":"module"}