{"version":3,"sources":["route/index.js","views/index/index.js","App.js","serviceWorker.js","index.js"],"names":["router","path","component","props","state","name","console","log","nextPro","nextProps","nextState","className","type","React","Component","App","map","item","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8PASeA,G,OAPA,CACb,CACEC,KAAM,SACNC,U,kDCCF,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,OAHS,E,iEAWjBC,QAAQC,IAAI,0C,0CAOZD,QAAQC,IAAI,sD,gDAMYC,GACxBF,QAAQC,IAAIC,K,4CAOQC,EAAWC,GAG/B,OAFAJ,QAAQC,IAAIE,EAAW,IACvBH,QAAQC,IAAIG,EAAW,KAChB,I,+BAGP,OACE,wDAEE,uBAAQC,UAAU,MAAMC,KAAK,WAA7B,gB,GA1CYC,IAAMC,cCYXC,MAZf,WACE,OACE,yBAAKJ,UAAU,OAEVX,EAAOgB,KAAI,SAACC,EAAMC,GAChB,OAAO,kBAAC,IAAD,CAAOC,IAAKD,EAAGjB,KAAMgB,EAAKhB,KAAMC,UAAWe,EAAKf,iBCE9CkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCTNC,IAASC,OACP,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OACRC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.ee55ff15.chunk.js","sourcesContent":["\r\nimport Index from './../views/index/index'\r\nconst router = [\r\n  {\r\n    path: \"/index\",\r\n    component: Index\r\n  }\r\n]\r\n\r\nexport default router","import React from 'react'\r\nimport './index.css'\r\nimport { Button } from 'antd-mobile'\r\n\r\n// 生命周期\r\nclass Index extends React.Component{\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      name: 'cmk'\r\n    }\r\n  }\r\n  /**\r\n   * 装载组件触发\r\n   * 只会在装载之前调用一次，在 render 之前调用，你可以在这个方法里面调用 setState 改变状态，并且不会导致额外调用一次 render\r\n   */\r\n  componentWillMount() {\r\n    console.log('装载组件触发')\r\n  }\r\n  /**\r\n   * 装载完成之后调用\r\n   * 只会在装载完成之后调用一次，在 render 之后调用，从这里开始可以通过 ReactDOM.findDOMNode(this) 获取到组件的 DOM 节点。\r\n   */\r\n  componentDidMount() {\r\n    console.log('装载完成之后调用')\r\n  }\r\n  /**\r\n   * 当props 修改时触发\r\n   * @param {Object} nextPro  修改后的props 数据\r\n   */\r\n  componentWillReceiveProps(nextPro) {\r\n    console.log(nextPro)\r\n  }\r\n  /**\r\n   * 修改state时触发\r\n   * @param {Object} nextProps \r\n   * @param {Object} nextState \r\n   */\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    console.log(nextProps, 15)\r\n    console.log(nextState, 69)\r\n    return true\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        生命周期\r\n        <Button className=\"btn\" type=\"warning\">warning</Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Index","import React from 'react';\nimport './App.css';\nimport {  Route } from 'react-router-dom'\nimport router from './route/index'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       {\n         router.map((item, i) => {\n           return <Route key={i} path={item.path} component={item.component}  />\n         })\n       }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"lib-flexible\"\nimport 'antd-mobile/lib/toast/style/index.css'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <Router><App /></Router>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}